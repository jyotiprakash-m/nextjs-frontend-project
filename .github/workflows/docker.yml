name: Deploy to Docker on EC2

on:
  push:
    branches: ['main']

env:
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  APP_PORT: ${{ secrets.APP_PORT }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build Application
        run: npm run build

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        id: build-image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/nextjs-frontend-project:latest .

      - name: Push Docker image to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/nextjs-frontend-project:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build # Ensures deploy runs only after the build job completes successfully
    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Verify Docker is running
            sudo systemctl status docker || sudo systemctl start docker

            # Log in to Docker Hub
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Pull the latest Docker image
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/nextjs-frontend-project:latest

            # Stop and remove existing container if it exists
            if [ "$(sudo docker ps -q -f name=nextjs-frontend-project)" ]; then
              echo "Stopping existing container..."
              sudo docker stop nextjs-frontend-project
              sudo docker rm nextjs-frontend-project
            fi

            # Free up port if needed
            sudo fuser -k ${{ secrets.APP_PORT }}/tcp || true

            # Run the Docker container
            echo "Starting new container..."
            sudo docker run -d --name nextjs-frontend-project -p ${{ secrets.APP_PORT }}:3000 ${{ secrets.DOCKER_USERNAME }}/nextjs-frontend-project:latest

            # Verify the container is running
            echo "Verifying the container is running..."
            sudo docker ps -a | grep nextjs-frontend-project

            # Log the image ID for reference
            echo "Deployed image ID: $(sudo docker images -q ${{ secrets.DOCKER_USERNAME }}/nextjs-frontend-project:latest)"

            # Cleanup dangling images
            echo "Cleaning up dangling images..."
            sudo docker image prune -f